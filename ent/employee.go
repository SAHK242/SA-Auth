// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auth/ent/auth"
	"auth/ent/department"
	"auth/ent/doctor"
	"auth/ent/employee"
	"auth/ent/nurse"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Employee is the model entity for the Employee schema.
type Employee struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// EmployeeID holds the value of the "employee_id" field.
	EmployeeID uuid.UUID `json:"employee_id,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// Gender holds the value of the "gender" field.
	Gender int32 `json:"gender,omitempty"`
	// DateOfBirth holds the value of the "date_of_birth" field.
	DateOfBirth time.Time `json:"date_of_birth,omitempty"`
	// Code holds the value of the "code" field.
	Code string `json:"code,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
	// StartDate holds the value of the "start_date" field.
	StartDate time.Time `json:"start_date,omitempty"`
	// EndDate holds the value of the "end_date" field.
	EndDate *time.Time `json:"end_date,omitempty"`
	// PhoneNumber holds the value of the "phone_number" field.
	PhoneNumber string `json:"phone_number,omitempty"`
	// DegreeName holds the value of the "degree_name" field.
	DegreeName string `json:"degree_name,omitempty"`
	// DegreeYear holds the value of the "degree_year" field.
	DegreeYear int32 `json:"degree_year,omitempty"`
	// DepartmentID holds the value of the "department_id" field.
	DepartmentID uuid.UUID `json:"department_id,omitempty"`
	// EmployeeType holds the value of the "employee_type" field.
	EmployeeType int32 `json:"employee_type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the EmployeeQuery when eager-loading is set.
	Edges        EmployeeEdges `json:"edges"`
	selectValues sql.SelectValues
}

// EmployeeEdges holds the relations/edges for other nodes in the graph.
type EmployeeEdges struct {
	// Auth holds the value of the auth edge.
	Auth *Auth `json:"auth,omitempty"`
	// Department holds the value of the department edge.
	Department *Department `json:"department,omitempty"`
	// Doctor holds the value of the doctor edge.
	Doctor *Doctor `json:"doctor,omitempty"`
	// Nurse holds the value of the nurse edge.
	Nurse *Nurse `json:"nurse,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AuthOrErr returns the Auth value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) AuthOrErr() (*Auth, error) {
	if e.Auth != nil {
		return e.Auth, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: auth.Label}
	}
	return nil, &NotLoadedError{edge: "auth"}
}

// DepartmentOrErr returns the Department value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) DepartmentOrErr() (*Department, error) {
	if e.Department != nil {
		return e.Department, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: department.Label}
	}
	return nil, &NotLoadedError{edge: "department"}
}

// DoctorOrErr returns the Doctor value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) DoctorOrErr() (*Doctor, error) {
	if e.Doctor != nil {
		return e.Doctor, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: doctor.Label}
	}
	return nil, &NotLoadedError{edge: "doctor"}
}

// NurseOrErr returns the Nurse value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e EmployeeEdges) NurseOrErr() (*Nurse, error) {
	if e.Nurse != nil {
		return e.Nurse, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: nurse.Label}
	}
	return nil, &NotLoadedError{edge: "nurse"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Employee) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case employee.FieldGender, employee.FieldDegreeYear, employee.FieldEmployeeType:
			values[i] = new(sql.NullInt64)
		case employee.FieldFirstName, employee.FieldLastName, employee.FieldCode, employee.FieldAddress, employee.FieldPhoneNumber, employee.FieldDegreeName:
			values[i] = new(sql.NullString)
		case employee.FieldDateOfBirth, employee.FieldStartDate, employee.FieldEndDate:
			values[i] = new(sql.NullTime)
		case employee.FieldID, employee.FieldEmployeeID, employee.FieldDepartmentID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Employee fields.
func (e *Employee) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case employee.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				e.ID = *value
			}
		case employee.FieldEmployeeID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field employee_id", values[i])
			} else if value != nil {
				e.EmployeeID = *value
			}
		case employee.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				e.FirstName = value.String
			}
		case employee.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				e.LastName = value.String
			}
		case employee.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				e.Gender = int32(value.Int64)
			}
		case employee.FieldDateOfBirth:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date_of_birth", values[i])
			} else if value.Valid {
				e.DateOfBirth = value.Time
			}
		case employee.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				e.Code = value.String
			}
		case employee.FieldAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field address", values[i])
			} else if value.Valid {
				e.Address = value.String
			}
		case employee.FieldStartDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_date", values[i])
			} else if value.Valid {
				e.StartDate = value.Time
			}
		case employee.FieldEndDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_date", values[i])
			} else if value.Valid {
				e.EndDate = new(time.Time)
				*e.EndDate = value.Time
			}
		case employee.FieldPhoneNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field phone_number", values[i])
			} else if value.Valid {
				e.PhoneNumber = value.String
			}
		case employee.FieldDegreeName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field degree_name", values[i])
			} else if value.Valid {
				e.DegreeName = value.String
			}
		case employee.FieldDegreeYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field degree_year", values[i])
			} else if value.Valid {
				e.DegreeYear = int32(value.Int64)
			}
		case employee.FieldDepartmentID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field department_id", values[i])
			} else if value != nil {
				e.DepartmentID = *value
			}
		case employee.FieldEmployeeType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field employee_type", values[i])
			} else if value.Valid {
				e.EmployeeType = int32(value.Int64)
			}
		default:
			e.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Employee.
// This includes values selected through modifiers, order, etc.
func (e *Employee) Value(name string) (ent.Value, error) {
	return e.selectValues.Get(name)
}

// QueryAuth queries the "auth" edge of the Employee entity.
func (e *Employee) QueryAuth() *AuthQuery {
	return NewEmployeeClient(e.config).QueryAuth(e)
}

// QueryDepartment queries the "department" edge of the Employee entity.
func (e *Employee) QueryDepartment() *DepartmentQuery {
	return NewEmployeeClient(e.config).QueryDepartment(e)
}

// QueryDoctor queries the "doctor" edge of the Employee entity.
func (e *Employee) QueryDoctor() *DoctorQuery {
	return NewEmployeeClient(e.config).QueryDoctor(e)
}

// QueryNurse queries the "nurse" edge of the Employee entity.
func (e *Employee) QueryNurse() *NurseQuery {
	return NewEmployeeClient(e.config).QueryNurse(e)
}

// Update returns a builder for updating this Employee.
// Note that you need to call Employee.Unwrap() before calling this method if this Employee
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Employee) Update() *EmployeeUpdateOne {
	return NewEmployeeClient(e.config).UpdateOne(e)
}

// Unwrap unwraps the Employee entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (e *Employee) Unwrap() *Employee {
	_tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Employee is not a transactional entity")
	}
	e.config.driver = _tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Employee) String() string {
	var builder strings.Builder
	builder.WriteString("Employee(")
	builder.WriteString(fmt.Sprintf("id=%v, ", e.ID))
	builder.WriteString("employee_id=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeeID))
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(e.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(e.LastName)
	builder.WriteString(", ")
	builder.WriteString("gender=")
	builder.WriteString(fmt.Sprintf("%v", e.Gender))
	builder.WriteString(", ")
	builder.WriteString("date_of_birth=")
	builder.WriteString(e.DateOfBirth.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(e.Code)
	builder.WriteString(", ")
	builder.WriteString("address=")
	builder.WriteString(e.Address)
	builder.WriteString(", ")
	builder.WriteString("start_date=")
	builder.WriteString(e.StartDate.Format(time.ANSIC))
	builder.WriteString(", ")
	if v := e.EndDate; v != nil {
		builder.WriteString("end_date=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("phone_number=")
	builder.WriteString(e.PhoneNumber)
	builder.WriteString(", ")
	builder.WriteString("degree_name=")
	builder.WriteString(e.DegreeName)
	builder.WriteString(", ")
	builder.WriteString("degree_year=")
	builder.WriteString(fmt.Sprintf("%v", e.DegreeYear))
	builder.WriteString(", ")
	builder.WriteString("department_id=")
	builder.WriteString(fmt.Sprintf("%v", e.DepartmentID))
	builder.WriteString(", ")
	builder.WriteString("employee_type=")
	builder.WriteString(fmt.Sprintf("%v", e.EmployeeType))
	builder.WriteByte(')')
	return builder.String()
}

// Employees is a parsable slice of Employee.
type Employees []*Employee
