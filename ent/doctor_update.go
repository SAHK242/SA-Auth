// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auth/ent/doctor"
	"auth/ent/employee"
	"auth/ent/predicate"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DoctorUpdate is the builder for updating Doctor entities.
type DoctorUpdate struct {
	config
	hooks    []Hook
	mutation *DoctorMutation
}

// Where appends a list predicates to the DoctorUpdate builder.
func (du *DoctorUpdate) Where(ps ...predicate.Doctor) *DoctorUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDoctorID sets the "doctor_id" field.
func (du *DoctorUpdate) SetDoctorID(u uuid.UUID) *DoctorUpdate {
	du.mutation.SetDoctorID(u)
	return du
}

// SetNillableDoctorID sets the "doctor_id" field if the given value is not nil.
func (du *DoctorUpdate) SetNillableDoctorID(u *uuid.UUID) *DoctorUpdate {
	if u != nil {
		du.SetDoctorID(*u)
	}
	return du
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (du *DoctorUpdate) SetEmployeeID(id uuid.UUID) *DoctorUpdate {
	du.mutation.SetEmployeeID(id)
	return du
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (du *DoctorUpdate) SetEmployee(e *Employee) *DoctorUpdate {
	return du.SetEmployeeID(e.ID)
}

// Mutation returns the DoctorMutation object of the builder.
func (du *DoctorUpdate) Mutation() *DoctorMutation {
	return du.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (du *DoctorUpdate) ClearEmployee() *DoctorUpdate {
	du.mutation.ClearEmployee()
	return du
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DoctorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DoctorUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DoctorUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DoctorUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (du *DoctorUpdate) check() error {
	if du.mutation.EmployeeCleared() && len(du.mutation.EmployeeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Doctor.employee"`)
	}
	return nil
}

func (du *DoctorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := du.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(doctor.Table, doctor.Columns, sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if du.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   doctor.EmployeeTable,
			Columns: []string{doctor.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   doctor.EmployeeTable,
			Columns: []string{doctor.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DoctorUpdateOne is the builder for updating a single Doctor entity.
type DoctorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DoctorMutation
}

// SetDoctorID sets the "doctor_id" field.
func (duo *DoctorUpdateOne) SetDoctorID(u uuid.UUID) *DoctorUpdateOne {
	duo.mutation.SetDoctorID(u)
	return duo
}

// SetNillableDoctorID sets the "doctor_id" field if the given value is not nil.
func (duo *DoctorUpdateOne) SetNillableDoctorID(u *uuid.UUID) *DoctorUpdateOne {
	if u != nil {
		duo.SetDoctorID(*u)
	}
	return duo
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (duo *DoctorUpdateOne) SetEmployeeID(id uuid.UUID) *DoctorUpdateOne {
	duo.mutation.SetEmployeeID(id)
	return duo
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (duo *DoctorUpdateOne) SetEmployee(e *Employee) *DoctorUpdateOne {
	return duo.SetEmployeeID(e.ID)
}

// Mutation returns the DoctorMutation object of the builder.
func (duo *DoctorUpdateOne) Mutation() *DoctorMutation {
	return duo.mutation
}

// ClearEmployee clears the "employee" edge to the Employee entity.
func (duo *DoctorUpdateOne) ClearEmployee() *DoctorUpdateOne {
	duo.mutation.ClearEmployee()
	return duo
}

// Where appends a list predicates to the DoctorUpdate builder.
func (duo *DoctorUpdateOne) Where(ps ...predicate.Doctor) *DoctorUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DoctorUpdateOne) Select(field string, fields ...string) *DoctorUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Doctor entity.
func (duo *DoctorUpdateOne) Save(ctx context.Context) (*Doctor, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DoctorUpdateOne) SaveX(ctx context.Context) *Doctor {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DoctorUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DoctorUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (duo *DoctorUpdateOne) check() error {
	if duo.mutation.EmployeeCleared() && len(duo.mutation.EmployeeIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Doctor.employee"`)
	}
	return nil
}

func (duo *DoctorUpdateOne) sqlSave(ctx context.Context) (_node *Doctor, err error) {
	if err := duo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(doctor.Table, doctor.Columns, sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Doctor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, doctor.FieldID)
		for _, f := range fields {
			if !doctor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != doctor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if duo.mutation.EmployeeCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   doctor.EmployeeTable,
			Columns: []string{doctor.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   doctor.EmployeeTable,
			Columns: []string{doctor.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Doctor{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{doctor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
