// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auth/ent/employee"
	"auth/ent/nurse"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Nurse is the model entity for the Nurse schema.
type Nurse struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// NurseID holds the value of the "nurse_id" field.
	NurseID uuid.UUID `json:"nurse_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NurseQuery when eager-loading is set.
	Edges        NurseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// NurseEdges holds the relations/edges for other nodes in the graph.
type NurseEdges struct {
	// Employee holds the value of the employee edge.
	Employee *Employee `json:"employee,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// EmployeeOrErr returns the Employee value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NurseEdges) EmployeeOrErr() (*Employee, error) {
	if e.Employee != nil {
		return e.Employee, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: employee.Label}
	}
	return nil, &NotLoadedError{edge: "employee"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nurse) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case nurse.FieldID, nurse.FieldNurseID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nurse fields.
func (n *Nurse) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nurse.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				n.ID = *value
			}
		case nurse.FieldNurseID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field nurse_id", values[i])
			} else if value != nil {
				n.NurseID = *value
			}
		default:
			n.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Nurse.
// This includes values selected through modifiers, order, etc.
func (n *Nurse) Value(name string) (ent.Value, error) {
	return n.selectValues.Get(name)
}

// QueryEmployee queries the "employee" edge of the Nurse entity.
func (n *Nurse) QueryEmployee() *EmployeeQuery {
	return NewNurseClient(n.config).QueryEmployee(n)
}

// Update returns a builder for updating this Nurse.
// Note that you need to call Nurse.Unwrap() before calling this method if this Nurse
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Nurse) Update() *NurseUpdateOne {
	return NewNurseClient(n.config).UpdateOne(n)
}

// Unwrap unwraps the Nurse entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Nurse) Unwrap() *Nurse {
	_tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Nurse is not a transactional entity")
	}
	n.config.driver = _tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Nurse) String() string {
	var builder strings.Builder
	builder.WriteString("Nurse(")
	builder.WriteString(fmt.Sprintf("id=%v, ", n.ID))
	builder.WriteString("nurse_id=")
	builder.WriteString(fmt.Sprintf("%v", n.NurseID))
	builder.WriteByte(')')
	return builder.String()
}

// Nurses is a parsable slice of Nurse.
type Nurses []*Nurse
