// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auth/ent/employee"
	"auth/ent/nurse"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// NurseCreate is the builder for creating a Nurse entity.
type NurseCreate struct {
	config
	mutation *NurseMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetNurseID sets the "nurse_id" field.
func (nc *NurseCreate) SetNurseID(u uuid.UUID) *NurseCreate {
	nc.mutation.SetNurseID(u)
	return nc
}

// SetID sets the "id" field.
func (nc *NurseCreate) SetID(u uuid.UUID) *NurseCreate {
	nc.mutation.SetID(u)
	return nc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nc *NurseCreate) SetNillableID(u *uuid.UUID) *NurseCreate {
	if u != nil {
		nc.SetID(*u)
	}
	return nc
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (nc *NurseCreate) SetEmployeeID(id uuid.UUID) *NurseCreate {
	nc.mutation.SetEmployeeID(id)
	return nc
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (nc *NurseCreate) SetEmployee(e *Employee) *NurseCreate {
	return nc.SetEmployeeID(e.ID)
}

// Mutation returns the NurseMutation object of the builder.
func (nc *NurseCreate) Mutation() *NurseMutation {
	return nc.mutation
}

// Save creates the Nurse in the database.
func (nc *NurseCreate) Save(ctx context.Context) (*Nurse, error) {
	nc.defaults()
	return withHooks(ctx, nc.sqlSave, nc.mutation, nc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NurseCreate) SaveX(ctx context.Context) *Nurse {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NurseCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NurseCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NurseCreate) defaults() {
	if _, ok := nc.mutation.ID(); !ok {
		v := nurse.DefaultID()
		nc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NurseCreate) check() error {
	if _, ok := nc.mutation.NurseID(); !ok {
		return &ValidationError{Name: "nurse_id", err: errors.New(`ent: missing required field "Nurse.nurse_id"`)}
	}
	if len(nc.mutation.EmployeeIDs()) == 0 {
		return &ValidationError{Name: "employee", err: errors.New(`ent: missing required edge "Nurse.employee"`)}
	}
	return nil
}

func (nc *NurseCreate) sqlSave(ctx context.Context) (*Nurse, error) {
	if err := nc.check(); err != nil {
		return nil, err
	}
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	nc.mutation.id = &_node.ID
	nc.mutation.done = true
	return _node, nil
}

func (nc *NurseCreate) createSpec() (*Nurse, *sqlgraph.CreateSpec) {
	var (
		_node = &Nurse{config: nc.config}
		_spec = sqlgraph.NewCreateSpec(nurse.Table, sqlgraph.NewFieldSpec(nurse.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = nc.conflict
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := nc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   nurse.EmployeeTable,
			Columns: []string{nurse.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NurseID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Nurse.Create().
//		SetNurseID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NurseUpsert) {
//			SetNurseID(v+v).
//		}).
//		Exec(ctx)
func (nc *NurseCreate) OnConflict(opts ...sql.ConflictOption) *NurseUpsertOne {
	nc.conflict = opts
	return &NurseUpsertOne{
		create: nc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Nurse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (nc *NurseCreate) OnConflictColumns(columns ...string) *NurseUpsertOne {
	nc.conflict = append(nc.conflict, sql.ConflictColumns(columns...))
	return &NurseUpsertOne{
		create: nc,
	}
}

type (
	// NurseUpsertOne is the builder for "upsert"-ing
	//  one Nurse node.
	NurseUpsertOne struct {
		create *NurseCreate
	}

	// NurseUpsert is the "OnConflict" setter.
	NurseUpsert struct {
		*sql.UpdateSet
	}
)

// SetNurseID sets the "nurse_id" field.
func (u *NurseUpsert) SetNurseID(v uuid.UUID) *NurseUpsert {
	u.Set(nurse.FieldNurseID, v)
	return u
}

// UpdateNurseID sets the "nurse_id" field to the value that was provided on create.
func (u *NurseUpsert) UpdateNurseID() *NurseUpsert {
	u.SetExcluded(nurse.FieldNurseID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Nurse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(nurse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NurseUpsertOne) UpdateNewValues() *NurseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(nurse.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Nurse.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *NurseUpsertOne) Ignore() *NurseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NurseUpsertOne) DoNothing() *NurseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NurseCreate.OnConflict
// documentation for more info.
func (u *NurseUpsertOne) Update(set func(*NurseUpsert)) *NurseUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NurseUpsert{UpdateSet: update})
	}))
	return u
}

// SetNurseID sets the "nurse_id" field.
func (u *NurseUpsertOne) SetNurseID(v uuid.UUID) *NurseUpsertOne {
	return u.Update(func(s *NurseUpsert) {
		s.SetNurseID(v)
	})
}

// UpdateNurseID sets the "nurse_id" field to the value that was provided on create.
func (u *NurseUpsertOne) UpdateNurseID() *NurseUpsertOne {
	return u.Update(func(s *NurseUpsert) {
		s.UpdateNurseID()
	})
}

// Exec executes the query.
func (u *NurseUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NurseCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NurseUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *NurseUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: NurseUpsertOne.ID is not supported by MySQL driver. Use NurseUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *NurseUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// NurseCreateBulk is the builder for creating many Nurse entities in bulk.
type NurseCreateBulk struct {
	config
	err      error
	builders []*NurseCreate
	conflict []sql.ConflictOption
}

// Save creates the Nurse entities in the database.
func (ncb *NurseCreateBulk) Save(ctx context.Context) ([]*Nurse, error) {
	if ncb.err != nil {
		return nil, ncb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Nurse, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NurseMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ncb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NurseCreateBulk) SaveX(ctx context.Context) []*Nurse {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NurseCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NurseCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Nurse.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.NurseUpsert) {
//			SetNurseID(v+v).
//		}).
//		Exec(ctx)
func (ncb *NurseCreateBulk) OnConflict(opts ...sql.ConflictOption) *NurseUpsertBulk {
	ncb.conflict = opts
	return &NurseUpsertBulk{
		create: ncb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Nurse.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ncb *NurseCreateBulk) OnConflictColumns(columns ...string) *NurseUpsertBulk {
	ncb.conflict = append(ncb.conflict, sql.ConflictColumns(columns...))
	return &NurseUpsertBulk{
		create: ncb,
	}
}

// NurseUpsertBulk is the builder for "upsert"-ing
// a bulk of Nurse nodes.
type NurseUpsertBulk struct {
	create *NurseCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Nurse.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(nurse.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *NurseUpsertBulk) UpdateNewValues() *NurseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(nurse.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Nurse.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *NurseUpsertBulk) Ignore() *NurseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *NurseUpsertBulk) DoNothing() *NurseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the NurseCreateBulk.OnConflict
// documentation for more info.
func (u *NurseUpsertBulk) Update(set func(*NurseUpsert)) *NurseUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&NurseUpsert{UpdateSet: update})
	}))
	return u
}

// SetNurseID sets the "nurse_id" field.
func (u *NurseUpsertBulk) SetNurseID(v uuid.UUID) *NurseUpsertBulk {
	return u.Update(func(s *NurseUpsert) {
		s.SetNurseID(v)
	})
}

// UpdateNurseID sets the "nurse_id" field to the value that was provided on create.
func (u *NurseUpsertBulk) UpdateNurseID() *NurseUpsertBulk {
	return u.Update(func(s *NurseUpsert) {
		s.UpdateNurseID()
	})
}

// Exec executes the query.
func (u *NurseUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the NurseCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for NurseCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *NurseUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
