// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auth/ent/doctor"
	"auth/ent/employee"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DoctorCreate is the builder for creating a Doctor entity.
type DoctorCreate struct {
	config
	mutation *DoctorMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDoctorID sets the "doctor_id" field.
func (dc *DoctorCreate) SetDoctorID(u uuid.UUID) *DoctorCreate {
	dc.mutation.SetDoctorID(u)
	return dc
}

// SetID sets the "id" field.
func (dc *DoctorCreate) SetID(u uuid.UUID) *DoctorCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DoctorCreate) SetNillableID(u *uuid.UUID) *DoctorCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetEmployeeID sets the "employee" edge to the Employee entity by ID.
func (dc *DoctorCreate) SetEmployeeID(id uuid.UUID) *DoctorCreate {
	dc.mutation.SetEmployeeID(id)
	return dc
}

// SetEmployee sets the "employee" edge to the Employee entity.
func (dc *DoctorCreate) SetEmployee(e *Employee) *DoctorCreate {
	return dc.SetEmployeeID(e.ID)
}

// Mutation returns the DoctorMutation object of the builder.
func (dc *DoctorCreate) Mutation() *DoctorMutation {
	return dc.mutation
}

// Save creates the Doctor in the database.
func (dc *DoctorCreate) Save(ctx context.Context) (*Doctor, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DoctorCreate) SaveX(ctx context.Context) *Doctor {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DoctorCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DoctorCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DoctorCreate) defaults() {
	if _, ok := dc.mutation.ID(); !ok {
		v := doctor.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DoctorCreate) check() error {
	if _, ok := dc.mutation.DoctorID(); !ok {
		return &ValidationError{Name: "doctor_id", err: errors.New(`ent: missing required field "Doctor.doctor_id"`)}
	}
	if len(dc.mutation.EmployeeIDs()) == 0 {
		return &ValidationError{Name: "employee", err: errors.New(`ent: missing required edge "Doctor.employee"`)}
	}
	return nil
}

func (dc *DoctorCreate) sqlSave(ctx context.Context) (*Doctor, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DoctorCreate) createSpec() (*Doctor, *sqlgraph.CreateSpec) {
	var (
		_node = &Doctor{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(doctor.Table, sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = dc.conflict
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if nodes := dc.mutation.EmployeeIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   doctor.EmployeeTable,
			Columns: []string{doctor.EmployeeColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DoctorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Doctor.Create().
//		SetDoctorID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DoctorUpsert) {
//			SetDoctorID(v+v).
//		}).
//		Exec(ctx)
func (dc *DoctorCreate) OnConflict(opts ...sql.ConflictOption) *DoctorUpsertOne {
	dc.conflict = opts
	return &DoctorUpsertOne{
		create: dc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Doctor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dc *DoctorCreate) OnConflictColumns(columns ...string) *DoctorUpsertOne {
	dc.conflict = append(dc.conflict, sql.ConflictColumns(columns...))
	return &DoctorUpsertOne{
		create: dc,
	}
}

type (
	// DoctorUpsertOne is the builder for "upsert"-ing
	//  one Doctor node.
	DoctorUpsertOne struct {
		create *DoctorCreate
	}

	// DoctorUpsert is the "OnConflict" setter.
	DoctorUpsert struct {
		*sql.UpdateSet
	}
)

// SetDoctorID sets the "doctor_id" field.
func (u *DoctorUpsert) SetDoctorID(v uuid.UUID) *DoctorUpsert {
	u.Set(doctor.FieldDoctorID, v)
	return u
}

// UpdateDoctorID sets the "doctor_id" field to the value that was provided on create.
func (u *DoctorUpsert) UpdateDoctorID() *DoctorUpsert {
	u.SetExcluded(doctor.FieldDoctorID)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Doctor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(doctor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DoctorUpsertOne) UpdateNewValues() *DoctorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(doctor.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Doctor.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *DoctorUpsertOne) Ignore() *DoctorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DoctorUpsertOne) DoNothing() *DoctorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DoctorCreate.OnConflict
// documentation for more info.
func (u *DoctorUpsertOne) Update(set func(*DoctorUpsert)) *DoctorUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DoctorUpsert{UpdateSet: update})
	}))
	return u
}

// SetDoctorID sets the "doctor_id" field.
func (u *DoctorUpsertOne) SetDoctorID(v uuid.UUID) *DoctorUpsertOne {
	return u.Update(func(s *DoctorUpsert) {
		s.SetDoctorID(v)
	})
}

// UpdateDoctorID sets the "doctor_id" field to the value that was provided on create.
func (u *DoctorUpsertOne) UpdateDoctorID() *DoctorUpsertOne {
	return u.Update(func(s *DoctorUpsert) {
		s.UpdateDoctorID()
	})
}

// Exec executes the query.
func (u *DoctorUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DoctorCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DoctorUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *DoctorUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: DoctorUpsertOne.ID is not supported by MySQL driver. Use DoctorUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *DoctorUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// DoctorCreateBulk is the builder for creating many Doctor entities in bulk.
type DoctorCreateBulk struct {
	config
	err      error
	builders []*DoctorCreate
	conflict []sql.ConflictOption
}

// Save creates the Doctor entities in the database.
func (dcb *DoctorCreateBulk) Save(ctx context.Context) ([]*Doctor, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Doctor, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DoctorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = dcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DoctorCreateBulk) SaveX(ctx context.Context) []*Doctor {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DoctorCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DoctorCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Doctor.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.DoctorUpsert) {
//			SetDoctorID(v+v).
//		}).
//		Exec(ctx)
func (dcb *DoctorCreateBulk) OnConflict(opts ...sql.ConflictOption) *DoctorUpsertBulk {
	dcb.conflict = opts
	return &DoctorUpsertBulk{
		create: dcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Doctor.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (dcb *DoctorCreateBulk) OnConflictColumns(columns ...string) *DoctorUpsertBulk {
	dcb.conflict = append(dcb.conflict, sql.ConflictColumns(columns...))
	return &DoctorUpsertBulk{
		create: dcb,
	}
}

// DoctorUpsertBulk is the builder for "upsert"-ing
// a bulk of Doctor nodes.
type DoctorUpsertBulk struct {
	create *DoctorCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Doctor.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(doctor.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *DoctorUpsertBulk) UpdateNewValues() *DoctorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(doctor.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Doctor.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *DoctorUpsertBulk) Ignore() *DoctorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *DoctorUpsertBulk) DoNothing() *DoctorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the DoctorCreateBulk.OnConflict
// documentation for more info.
func (u *DoctorUpsertBulk) Update(set func(*DoctorUpsert)) *DoctorUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&DoctorUpsert{UpdateSet: update})
	}))
	return u
}

// SetDoctorID sets the "doctor_id" field.
func (u *DoctorUpsertBulk) SetDoctorID(v uuid.UUID) *DoctorUpsertBulk {
	return u.Update(func(s *DoctorUpsert) {
		s.SetDoctorID(v)
	})
}

// UpdateDoctorID sets the "doctor_id" field to the value that was provided on create.
func (u *DoctorUpsertBulk) UpdateDoctorID() *DoctorUpsertBulk {
	return u.Update(func(s *DoctorUpsert) {
		s.UpdateDoctorID()
	})
}

// Exec executes the query.
func (u *DoctorUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the DoctorCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for DoctorCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *DoctorUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
