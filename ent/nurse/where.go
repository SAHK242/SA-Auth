// Code generated by ent, DO NOT EDIT.

package nurse

import (
	"auth/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldLTE(FieldID, id))
}

// NurseID applies equality check predicate on the "nurse_id" field. It's identical to NurseIDEQ.
func NurseID(v uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldEQ(FieldNurseID, v))
}

// NurseIDEQ applies the EQ predicate on the "nurse_id" field.
func NurseIDEQ(v uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldEQ(FieldNurseID, v))
}

// NurseIDNEQ applies the NEQ predicate on the "nurse_id" field.
func NurseIDNEQ(v uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldNEQ(FieldNurseID, v))
}

// NurseIDIn applies the In predicate on the "nurse_id" field.
func NurseIDIn(vs ...uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldIn(FieldNurseID, vs...))
}

// NurseIDNotIn applies the NotIn predicate on the "nurse_id" field.
func NurseIDNotIn(vs ...uuid.UUID) predicate.Nurse {
	return predicate.Nurse(sql.FieldNotIn(FieldNurseID, vs...))
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Nurse) predicate.Nurse {
	return predicate.Nurse(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Nurse) predicate.Nurse {
	return predicate.Nurse(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Nurse) predicate.Nurse {
	return predicate.Nurse(sql.NotPredicates(p))
}
