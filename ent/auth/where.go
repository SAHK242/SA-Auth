// Code generated by ent, DO NOT EDIT.

package auth

import (
	"auth/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldID, id))
}

// Email applies equality check predicate on the "email" field. It's identical to EmailEQ.
func Email(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldEmail, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldPassword, v))
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int32) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldState, v))
}

// CreatedDate applies equality check predicate on the "created_date" field. It's identical to CreatedDateEQ.
func CreatedDate(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldCreatedDate, v))
}

// LastModifiedDate applies equality check predicate on the "last_modified_date" field. It's identical to LastModifiedDateEQ.
func LastModifiedDate(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldLastModifiedDate, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldCreatedBy, v))
}

// LastModifiedBy applies equality check predicate on the "last_modified_by" field. It's identical to LastModifiedByEQ.
func LastModifiedBy(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldLastModifiedBy, v))
}

// EmailEQ applies the EQ predicate on the "email" field.
func EmailEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldEmail, v))
}

// EmailNEQ applies the NEQ predicate on the "email" field.
func EmailNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldEmail, v))
}

// EmailIn applies the In predicate on the "email" field.
func EmailIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldEmail, vs...))
}

// EmailNotIn applies the NotIn predicate on the "email" field.
func EmailNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldEmail, vs...))
}

// EmailGT applies the GT predicate on the "email" field.
func EmailGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldEmail, v))
}

// EmailGTE applies the GTE predicate on the "email" field.
func EmailGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldEmail, v))
}

// EmailLT applies the LT predicate on the "email" field.
func EmailLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldEmail, v))
}

// EmailLTE applies the LTE predicate on the "email" field.
func EmailLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldEmail, v))
}

// EmailContains applies the Contains predicate on the "email" field.
func EmailContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldEmail, v))
}

// EmailHasPrefix applies the HasPrefix predicate on the "email" field.
func EmailHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldEmail, v))
}

// EmailHasSuffix applies the HasSuffix predicate on the "email" field.
func EmailHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldEmail, v))
}

// EmailEqualFold applies the EqualFold predicate on the "email" field.
func EmailEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldEmail, v))
}

// EmailContainsFold applies the ContainsFold predicate on the "email" field.
func EmailContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldEmail, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.Auth {
	return predicate.Auth(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.Auth {
	return predicate.Auth(sql.FieldContainsFold(FieldPassword, v))
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int32) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldState, v))
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int32) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldState, v))
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int32) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldState, vs...))
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int32) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldState, vs...))
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int32) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldState, v))
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int32) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldState, v))
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int32) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldState, v))
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int32) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldState, v))
}

// CreatedDateEQ applies the EQ predicate on the "created_date" field.
func CreatedDateEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldCreatedDate, v))
}

// CreatedDateNEQ applies the NEQ predicate on the "created_date" field.
func CreatedDateNEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldCreatedDate, v))
}

// CreatedDateIn applies the In predicate on the "created_date" field.
func CreatedDateIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldCreatedDate, vs...))
}

// CreatedDateNotIn applies the NotIn predicate on the "created_date" field.
func CreatedDateNotIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldCreatedDate, vs...))
}

// CreatedDateGT applies the GT predicate on the "created_date" field.
func CreatedDateGT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldCreatedDate, v))
}

// CreatedDateGTE applies the GTE predicate on the "created_date" field.
func CreatedDateGTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldCreatedDate, v))
}

// CreatedDateLT applies the LT predicate on the "created_date" field.
func CreatedDateLT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldCreatedDate, v))
}

// CreatedDateLTE applies the LTE predicate on the "created_date" field.
func CreatedDateLTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldCreatedDate, v))
}

// LastModifiedDateEQ applies the EQ predicate on the "last_modified_date" field.
func LastModifiedDateEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldLastModifiedDate, v))
}

// LastModifiedDateNEQ applies the NEQ predicate on the "last_modified_date" field.
func LastModifiedDateNEQ(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldLastModifiedDate, v))
}

// LastModifiedDateIn applies the In predicate on the "last_modified_date" field.
func LastModifiedDateIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldLastModifiedDate, vs...))
}

// LastModifiedDateNotIn applies the NotIn predicate on the "last_modified_date" field.
func LastModifiedDateNotIn(vs ...time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldLastModifiedDate, vs...))
}

// LastModifiedDateGT applies the GT predicate on the "last_modified_date" field.
func LastModifiedDateGT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldLastModifiedDate, v))
}

// LastModifiedDateGTE applies the GTE predicate on the "last_modified_date" field.
func LastModifiedDateGTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldLastModifiedDate, v))
}

// LastModifiedDateLT applies the LT predicate on the "last_modified_date" field.
func LastModifiedDateLT(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldLastModifiedDate, v))
}

// LastModifiedDateLTE applies the LTE predicate on the "last_modified_date" field.
func LastModifiedDateLTE(v time.Time) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldLastModifiedDate, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldCreatedBy))
}

// LastModifiedByEQ applies the EQ predicate on the "last_modified_by" field.
func LastModifiedByEQ(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldEQ(FieldLastModifiedBy, v))
}

// LastModifiedByNEQ applies the NEQ predicate on the "last_modified_by" field.
func LastModifiedByNEQ(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldNEQ(FieldLastModifiedBy, v))
}

// LastModifiedByIn applies the In predicate on the "last_modified_by" field.
func LastModifiedByIn(vs ...uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldIn(FieldLastModifiedBy, vs...))
}

// LastModifiedByNotIn applies the NotIn predicate on the "last_modified_by" field.
func LastModifiedByNotIn(vs ...uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldNotIn(FieldLastModifiedBy, vs...))
}

// LastModifiedByGT applies the GT predicate on the "last_modified_by" field.
func LastModifiedByGT(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldGT(FieldLastModifiedBy, v))
}

// LastModifiedByGTE applies the GTE predicate on the "last_modified_by" field.
func LastModifiedByGTE(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldGTE(FieldLastModifiedBy, v))
}

// LastModifiedByLT applies the LT predicate on the "last_modified_by" field.
func LastModifiedByLT(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldLT(FieldLastModifiedBy, v))
}

// LastModifiedByLTE applies the LTE predicate on the "last_modified_by" field.
func LastModifiedByLTE(v uuid.UUID) predicate.Auth {
	return predicate.Auth(sql.FieldLTE(FieldLastModifiedBy, v))
}

// LastModifiedByIsNil applies the IsNil predicate on the "last_modified_by" field.
func LastModifiedByIsNil() predicate.Auth {
	return predicate.Auth(sql.FieldIsNull(FieldLastModifiedBy))
}

// LastModifiedByNotNil applies the NotNil predicate on the "last_modified_by" field.
func LastModifiedByNotNil() predicate.Auth {
	return predicate.Auth(sql.FieldNotNull(FieldLastModifiedBy))
}

// HasEmployee applies the HasEdge predicate on the "employee" edge.
func HasEmployee() predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, EmployeeTable, EmployeeColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEmployeeWith applies the HasEdge predicate on the "employee" edge with a given conditions (other predicates).
func HasEmployeeWith(preds ...predicate.Employee) predicate.Auth {
	return predicate.Auth(func(s *sql.Selector) {
		step := newEmployeeStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Auth) predicate.Auth {
	return predicate.Auth(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Auth) predicate.Auth {
	return predicate.Auth(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Auth) predicate.Auth {
	return predicate.Auth(sql.NotPredicates(p))
}
