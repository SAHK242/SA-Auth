// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AuthColumns holds the columns for the "auth" table.
	AuthColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "state", Type: field.TypeInt32},
		{Name: "created_date", Type: field.TypeTime},
		{Name: "last_modified_date", Type: field.TypeTime},
		{Name: "created_by", Type: field.TypeUUID, Nullable: true},
		{Name: "last_modified_by", Type: field.TypeUUID, Nullable: true},
	}
	// AuthTable holds the schema information for the "auth" table.
	AuthTable = &schema.Table{
		Name:       "auth",
		Columns:    AuthColumns,
		PrimaryKey: []*schema.Column{AuthColumns[0]},
	}
	// DepartmentColumns holds the columns for the "department" table.
	DepartmentColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "name", Type: field.TypeString, Unique: true},
	}
	// DepartmentTable holds the schema information for the "department" table.
	DepartmentTable = &schema.Table{
		Name:       "department",
		Columns:    DepartmentColumns,
		PrimaryKey: []*schema.Column{DepartmentColumns[0]},
	}
	// DoctorColumns holds the columns for the "doctor" table.
	DoctorColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "doctor_id", Type: field.TypeUUID, Unique: true},
	}
	// DoctorTable holds the schema information for the "doctor" table.
	DoctorTable = &schema.Table{
		Name:       "doctor",
		Columns:    DoctorColumns,
		PrimaryKey: []*schema.Column{DoctorColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "doctor_employee_doctor",
				Columns:    []*schema.Column{DoctorColumns[1]},
				RefColumns: []*schema.Column{EmployeeColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// EmployeeColumns holds the columns for the "employee" table.
	EmployeeColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "first_name", Type: field.TypeString},
		{Name: "last_name", Type: field.TypeString},
		{Name: "gender", Type: field.TypeInt32},
		{Name: "date_of_birth", Type: field.TypeTime},
		{Name: "code", Type: field.TypeString, Unique: true},
		{Name: "address", Type: field.TypeString},
		{Name: "start_date", Type: field.TypeTime},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "phone_number", Type: field.TypeString},
		{Name: "degree_name", Type: field.TypeString},
		{Name: "degree_year", Type: field.TypeInt32},
		{Name: "employee_type", Type: field.TypeInt32},
		{Name: "employee_id", Type: field.TypeUUID, Unique: true},
		{Name: "department_id", Type: field.TypeUUID},
	}
	// EmployeeTable holds the schema information for the "employee" table.
	EmployeeTable = &schema.Table{
		Name:       "employee",
		Columns:    EmployeeColumns,
		PrimaryKey: []*schema.Column{EmployeeColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "employee_auth_employee",
				Columns:    []*schema.Column{EmployeeColumns[13]},
				RefColumns: []*schema.Column{AuthColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "employee_department_employees",
				Columns:    []*schema.Column{EmployeeColumns[14]},
				RefColumns: []*schema.Column{DepartmentColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// NurseColumns holds the columns for the "nurse" table.
	NurseColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "nurse_id", Type: field.TypeUUID, Unique: true},
	}
	// NurseTable holds the schema information for the "nurse" table.
	NurseTable = &schema.Table{
		Name:       "nurse",
		Columns:    NurseColumns,
		PrimaryKey: []*schema.Column{NurseColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "nurse_employee_nurse",
				Columns:    []*schema.Column{NurseColumns[1]},
				RefColumns: []*schema.Column{EmployeeColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AuthTable,
		DepartmentTable,
		DoctorTable,
		EmployeeTable,
		NurseTable,
	}
)

func init() {
	AuthTable.Annotation = &entsql.Annotation{
		Table: "auth",
	}
	DepartmentTable.Annotation = &entsql.Annotation{
		Table: "department",
	}
	DoctorTable.ForeignKeys[0].RefTable = EmployeeTable
	DoctorTable.Annotation = &entsql.Annotation{
		Table: "doctor",
	}
	EmployeeTable.ForeignKeys[0].RefTable = AuthTable
	EmployeeTable.ForeignKeys[1].RefTable = DepartmentTable
	EmployeeTable.Annotation = &entsql.Annotation{
		Table: "employee",
	}
	NurseTable.ForeignKeys[0].RefTable = EmployeeTable
	NurseTable.Annotation = &entsql.Annotation{
		Table: "nurse",
	}
}
