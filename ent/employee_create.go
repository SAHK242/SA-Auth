// Code generated by ent, DO NOT EDIT.

package ent

import (
	"auth/ent/auth"
	"auth/ent/department"
	"auth/ent/doctor"
	"auth/ent/employee"
	"auth/ent/nurse"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// EmployeeCreate is the builder for creating a Employee entity.
type EmployeeCreate struct {
	config
	mutation *EmployeeMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetEmployeeID sets the "employee_id" field.
func (ec *EmployeeCreate) SetEmployeeID(u uuid.UUID) *EmployeeCreate {
	ec.mutation.SetEmployeeID(u)
	return ec
}

// SetFirstName sets the "first_name" field.
func (ec *EmployeeCreate) SetFirstName(s string) *EmployeeCreate {
	ec.mutation.SetFirstName(s)
	return ec
}

// SetLastName sets the "last_name" field.
func (ec *EmployeeCreate) SetLastName(s string) *EmployeeCreate {
	ec.mutation.SetLastName(s)
	return ec
}

// SetGender sets the "gender" field.
func (ec *EmployeeCreate) SetGender(i int32) *EmployeeCreate {
	ec.mutation.SetGender(i)
	return ec
}

// SetDateOfBirth sets the "date_of_birth" field.
func (ec *EmployeeCreate) SetDateOfBirth(t time.Time) *EmployeeCreate {
	ec.mutation.SetDateOfBirth(t)
	return ec
}

// SetCode sets the "code" field.
func (ec *EmployeeCreate) SetCode(s string) *EmployeeCreate {
	ec.mutation.SetCode(s)
	return ec
}

// SetAddress sets the "address" field.
func (ec *EmployeeCreate) SetAddress(s string) *EmployeeCreate {
	ec.mutation.SetAddress(s)
	return ec
}

// SetStartDate sets the "start_date" field.
func (ec *EmployeeCreate) SetStartDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetStartDate(t)
	return ec
}

// SetEndDate sets the "end_date" field.
func (ec *EmployeeCreate) SetEndDate(t time.Time) *EmployeeCreate {
	ec.mutation.SetEndDate(t)
	return ec
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableEndDate(t *time.Time) *EmployeeCreate {
	if t != nil {
		ec.SetEndDate(*t)
	}
	return ec
}

// SetPhoneNumber sets the "phone_number" field.
func (ec *EmployeeCreate) SetPhoneNumber(s string) *EmployeeCreate {
	ec.mutation.SetPhoneNumber(s)
	return ec
}

// SetDegreeName sets the "degree_name" field.
func (ec *EmployeeCreate) SetDegreeName(s string) *EmployeeCreate {
	ec.mutation.SetDegreeName(s)
	return ec
}

// SetDegreeYear sets the "degree_year" field.
func (ec *EmployeeCreate) SetDegreeYear(i int32) *EmployeeCreate {
	ec.mutation.SetDegreeYear(i)
	return ec
}

// SetDepartmentID sets the "department_id" field.
func (ec *EmployeeCreate) SetDepartmentID(u uuid.UUID) *EmployeeCreate {
	ec.mutation.SetDepartmentID(u)
	return ec
}

// SetEmployeeType sets the "employee_type" field.
func (ec *EmployeeCreate) SetEmployeeType(i int32) *EmployeeCreate {
	ec.mutation.SetEmployeeType(i)
	return ec
}

// SetID sets the "id" field.
func (ec *EmployeeCreate) SetID(u uuid.UUID) *EmployeeCreate {
	ec.mutation.SetID(u)
	return ec
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ec *EmployeeCreate) SetNillableID(u *uuid.UUID) *EmployeeCreate {
	if u != nil {
		ec.SetID(*u)
	}
	return ec
}

// SetAuthID sets the "auth" edge to the Auth entity by ID.
func (ec *EmployeeCreate) SetAuthID(id uuid.UUID) *EmployeeCreate {
	ec.mutation.SetAuthID(id)
	return ec
}

// SetAuth sets the "auth" edge to the Auth entity.
func (ec *EmployeeCreate) SetAuth(a *Auth) *EmployeeCreate {
	return ec.SetAuthID(a.ID)
}

// SetDepartment sets the "department" edge to the Department entity.
func (ec *EmployeeCreate) SetDepartment(d *Department) *EmployeeCreate {
	return ec.SetDepartmentID(d.ID)
}

// SetDoctorID sets the "doctor" edge to the Doctor entity by ID.
func (ec *EmployeeCreate) SetDoctorID(id uuid.UUID) *EmployeeCreate {
	ec.mutation.SetDoctorID(id)
	return ec
}

// SetNillableDoctorID sets the "doctor" edge to the Doctor entity by ID if the given value is not nil.
func (ec *EmployeeCreate) SetNillableDoctorID(id *uuid.UUID) *EmployeeCreate {
	if id != nil {
		ec = ec.SetDoctorID(*id)
	}
	return ec
}

// SetDoctor sets the "doctor" edge to the Doctor entity.
func (ec *EmployeeCreate) SetDoctor(d *Doctor) *EmployeeCreate {
	return ec.SetDoctorID(d.ID)
}

// SetNurseID sets the "nurse" edge to the Nurse entity by ID.
func (ec *EmployeeCreate) SetNurseID(id uuid.UUID) *EmployeeCreate {
	ec.mutation.SetNurseID(id)
	return ec
}

// SetNillableNurseID sets the "nurse" edge to the Nurse entity by ID if the given value is not nil.
func (ec *EmployeeCreate) SetNillableNurseID(id *uuid.UUID) *EmployeeCreate {
	if id != nil {
		ec = ec.SetNurseID(*id)
	}
	return ec
}

// SetNurse sets the "nurse" edge to the Nurse entity.
func (ec *EmployeeCreate) SetNurse(n *Nurse) *EmployeeCreate {
	return ec.SetNurseID(n.ID)
}

// Mutation returns the EmployeeMutation object of the builder.
func (ec *EmployeeCreate) Mutation() *EmployeeMutation {
	return ec.mutation
}

// Save creates the Employee in the database.
func (ec *EmployeeCreate) Save(ctx context.Context) (*Employee, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EmployeeCreate) SaveX(ctx context.Context) *Employee {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EmployeeCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EmployeeCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EmployeeCreate) defaults() {
	if _, ok := ec.mutation.ID(); !ok {
		v := employee.DefaultID()
		ec.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EmployeeCreate) check() error {
	if _, ok := ec.mutation.EmployeeID(); !ok {
		return &ValidationError{Name: "employee_id", err: errors.New(`ent: missing required field "Employee.employee_id"`)}
	}
	if _, ok := ec.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Employee.first_name"`)}
	}
	if _, ok := ec.mutation.LastName(); !ok {
		return &ValidationError{Name: "last_name", err: errors.New(`ent: missing required field "Employee.last_name"`)}
	}
	if _, ok := ec.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "Employee.gender"`)}
	}
	if _, ok := ec.mutation.DateOfBirth(); !ok {
		return &ValidationError{Name: "date_of_birth", err: errors.New(`ent: missing required field "Employee.date_of_birth"`)}
	}
	if _, ok := ec.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New(`ent: missing required field "Employee.code"`)}
	}
	if v, ok := ec.mutation.Code(); ok {
		if err := employee.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Employee.code": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Address(); !ok {
		return &ValidationError{Name: "address", err: errors.New(`ent: missing required field "Employee.address"`)}
	}
	if _, ok := ec.mutation.StartDate(); !ok {
		return &ValidationError{Name: "start_date", err: errors.New(`ent: missing required field "Employee.start_date"`)}
	}
	if _, ok := ec.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Employee.phone_number"`)}
	}
	if _, ok := ec.mutation.DegreeName(); !ok {
		return &ValidationError{Name: "degree_name", err: errors.New(`ent: missing required field "Employee.degree_name"`)}
	}
	if _, ok := ec.mutation.DegreeYear(); !ok {
		return &ValidationError{Name: "degree_year", err: errors.New(`ent: missing required field "Employee.degree_year"`)}
	}
	if _, ok := ec.mutation.DepartmentID(); !ok {
		return &ValidationError{Name: "department_id", err: errors.New(`ent: missing required field "Employee.department_id"`)}
	}
	if _, ok := ec.mutation.EmployeeType(); !ok {
		return &ValidationError{Name: "employee_type", err: errors.New(`ent: missing required field "Employee.employee_type"`)}
	}
	if len(ec.mutation.AuthIDs()) == 0 {
		return &ValidationError{Name: "auth", err: errors.New(`ent: missing required edge "Employee.auth"`)}
	}
	if len(ec.mutation.DepartmentIDs()) == 0 {
		return &ValidationError{Name: "department", err: errors.New(`ent: missing required edge "Employee.department"`)}
	}
	return nil
}

func (ec *EmployeeCreate) sqlSave(ctx context.Context) (*Employee, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EmployeeCreate) createSpec() (*Employee, *sqlgraph.CreateSpec) {
	var (
		_node = &Employee{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(employee.Table, sqlgraph.NewFieldSpec(employee.FieldID, field.TypeUUID))
	)
	_spec.OnConflict = ec.conflict
	if id, ok := ec.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := ec.mutation.FirstName(); ok {
		_spec.SetField(employee.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := ec.mutation.LastName(); ok {
		_spec.SetField(employee.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := ec.mutation.Gender(); ok {
		_spec.SetField(employee.FieldGender, field.TypeInt32, value)
		_node.Gender = value
	}
	if value, ok := ec.mutation.DateOfBirth(); ok {
		_spec.SetField(employee.FieldDateOfBirth, field.TypeTime, value)
		_node.DateOfBirth = value
	}
	if value, ok := ec.mutation.Code(); ok {
		_spec.SetField(employee.FieldCode, field.TypeString, value)
		_node.Code = value
	}
	if value, ok := ec.mutation.Address(); ok {
		_spec.SetField(employee.FieldAddress, field.TypeString, value)
		_node.Address = value
	}
	if value, ok := ec.mutation.StartDate(); ok {
		_spec.SetField(employee.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := ec.mutation.EndDate(); ok {
		_spec.SetField(employee.FieldEndDate, field.TypeTime, value)
		_node.EndDate = &value
	}
	if value, ok := ec.mutation.PhoneNumber(); ok {
		_spec.SetField(employee.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := ec.mutation.DegreeName(); ok {
		_spec.SetField(employee.FieldDegreeName, field.TypeString, value)
		_node.DegreeName = value
	}
	if value, ok := ec.mutation.DegreeYear(); ok {
		_spec.SetField(employee.FieldDegreeYear, field.TypeInt32, value)
		_node.DegreeYear = value
	}
	if value, ok := ec.mutation.EmployeeType(); ok {
		_spec.SetField(employee.FieldEmployeeType, field.TypeInt32, value)
		_node.EmployeeType = value
	}
	if nodes := ec.mutation.AuthIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   employee.AuthTable,
			Columns: []string{employee.AuthColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(auth.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EmployeeID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DepartmentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   employee.DepartmentTable,
			Columns: []string{employee.DepartmentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(department.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.DepartmentID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.DoctorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.DoctorTable,
			Columns: []string{employee.DoctorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(doctor.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.NurseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   employee.NurseTable,
			Columns: []string{employee.NurseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(nurse.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Employee.Create().
//		SetEmployeeID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmployeeUpsert) {
//			SetEmployeeID(v+v).
//		}).
//		Exec(ctx)
func (ec *EmployeeCreate) OnConflict(opts ...sql.ConflictOption) *EmployeeUpsertOne {
	ec.conflict = opts
	return &EmployeeUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EmployeeCreate) OnConflictColumns(columns ...string) *EmployeeUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EmployeeUpsertOne{
		create: ec,
	}
}

type (
	// EmployeeUpsertOne is the builder for "upsert"-ing
	//  one Employee node.
	EmployeeUpsertOne struct {
		create *EmployeeCreate
	}

	// EmployeeUpsert is the "OnConflict" setter.
	EmployeeUpsert struct {
		*sql.UpdateSet
	}
)

// SetEmployeeID sets the "employee_id" field.
func (u *EmployeeUpsert) SetEmployeeID(v uuid.UUID) *EmployeeUpsert {
	u.Set(employee.FieldEmployeeID, v)
	return u
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateEmployeeID() *EmployeeUpsert {
	u.SetExcluded(employee.FieldEmployeeID)
	return u
}

// SetFirstName sets the "first_name" field.
func (u *EmployeeUpsert) SetFirstName(v string) *EmployeeUpsert {
	u.Set(employee.FieldFirstName, v)
	return u
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateFirstName() *EmployeeUpsert {
	u.SetExcluded(employee.FieldFirstName)
	return u
}

// SetLastName sets the "last_name" field.
func (u *EmployeeUpsert) SetLastName(v string) *EmployeeUpsert {
	u.Set(employee.FieldLastName, v)
	return u
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateLastName() *EmployeeUpsert {
	u.SetExcluded(employee.FieldLastName)
	return u
}

// SetGender sets the "gender" field.
func (u *EmployeeUpsert) SetGender(v int32) *EmployeeUpsert {
	u.Set(employee.FieldGender, v)
	return u
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateGender() *EmployeeUpsert {
	u.SetExcluded(employee.FieldGender)
	return u
}

// AddGender adds v to the "gender" field.
func (u *EmployeeUpsert) AddGender(v int32) *EmployeeUpsert {
	u.Add(employee.FieldGender, v)
	return u
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *EmployeeUpsert) SetDateOfBirth(v time.Time) *EmployeeUpsert {
	u.Set(employee.FieldDateOfBirth, v)
	return u
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateDateOfBirth() *EmployeeUpsert {
	u.SetExcluded(employee.FieldDateOfBirth)
	return u
}

// SetCode sets the "code" field.
func (u *EmployeeUpsert) SetCode(v string) *EmployeeUpsert {
	u.Set(employee.FieldCode, v)
	return u
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateCode() *EmployeeUpsert {
	u.SetExcluded(employee.FieldCode)
	return u
}

// SetAddress sets the "address" field.
func (u *EmployeeUpsert) SetAddress(v string) *EmployeeUpsert {
	u.Set(employee.FieldAddress, v)
	return u
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateAddress() *EmployeeUpsert {
	u.SetExcluded(employee.FieldAddress)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *EmployeeUpsert) SetStartDate(v time.Time) *EmployeeUpsert {
	u.Set(employee.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateStartDate() *EmployeeUpsert {
	u.SetExcluded(employee.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *EmployeeUpsert) SetEndDate(v time.Time) *EmployeeUpsert {
	u.Set(employee.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateEndDate() *EmployeeUpsert {
	u.SetExcluded(employee.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *EmployeeUpsert) ClearEndDate() *EmployeeUpsert {
	u.SetNull(employee.FieldEndDate)
	return u
}

// SetPhoneNumber sets the "phone_number" field.
func (u *EmployeeUpsert) SetPhoneNumber(v string) *EmployeeUpsert {
	u.Set(employee.FieldPhoneNumber, v)
	return u
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdatePhoneNumber() *EmployeeUpsert {
	u.SetExcluded(employee.FieldPhoneNumber)
	return u
}

// SetDegreeName sets the "degree_name" field.
func (u *EmployeeUpsert) SetDegreeName(v string) *EmployeeUpsert {
	u.Set(employee.FieldDegreeName, v)
	return u
}

// UpdateDegreeName sets the "degree_name" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateDegreeName() *EmployeeUpsert {
	u.SetExcluded(employee.FieldDegreeName)
	return u
}

// SetDegreeYear sets the "degree_year" field.
func (u *EmployeeUpsert) SetDegreeYear(v int32) *EmployeeUpsert {
	u.Set(employee.FieldDegreeYear, v)
	return u
}

// UpdateDegreeYear sets the "degree_year" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateDegreeYear() *EmployeeUpsert {
	u.SetExcluded(employee.FieldDegreeYear)
	return u
}

// AddDegreeYear adds v to the "degree_year" field.
func (u *EmployeeUpsert) AddDegreeYear(v int32) *EmployeeUpsert {
	u.Add(employee.FieldDegreeYear, v)
	return u
}

// SetDepartmentID sets the "department_id" field.
func (u *EmployeeUpsert) SetDepartmentID(v uuid.UUID) *EmployeeUpsert {
	u.Set(employee.FieldDepartmentID, v)
	return u
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateDepartmentID() *EmployeeUpsert {
	u.SetExcluded(employee.FieldDepartmentID)
	return u
}

// SetEmployeeType sets the "employee_type" field.
func (u *EmployeeUpsert) SetEmployeeType(v int32) *EmployeeUpsert {
	u.Set(employee.FieldEmployeeType, v)
	return u
}

// UpdateEmployeeType sets the "employee_type" field to the value that was provided on create.
func (u *EmployeeUpsert) UpdateEmployeeType() *EmployeeUpsert {
	u.SetExcluded(employee.FieldEmployeeType)
	return u
}

// AddEmployeeType adds v to the "employee_type" field.
func (u *EmployeeUpsert) AddEmployeeType(v int32) *EmployeeUpsert {
	u.Add(employee.FieldEmployeeType, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(employee.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EmployeeUpsertOne) UpdateNewValues() *EmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(employee.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Employee.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EmployeeUpsertOne) Ignore() *EmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmployeeUpsertOne) DoNothing() *EmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmployeeCreate.OnConflict
// documentation for more info.
func (u *EmployeeUpsertOne) Update(set func(*EmployeeUpsert)) *EmployeeUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmployeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *EmployeeUpsertOne) SetEmployeeID(v uuid.UUID) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateEmployeeID() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetFirstName sets the "first_name" field.
func (u *EmployeeUpsertOne) SetFirstName(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateFirstName() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *EmployeeUpsertOne) SetLastName(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateLastName() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateLastName()
	})
}

// SetGender sets the "gender" field.
func (u *EmployeeUpsertOne) SetGender(v int32) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *EmployeeUpsertOne) AddGender(v int32) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateGender() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateGender()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *EmployeeUpsertOne) SetDateOfBirth(v time.Time) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateDateOfBirth() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDateOfBirth()
	})
}

// SetCode sets the "code" field.
func (u *EmployeeUpsertOne) SetCode(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateCode() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateCode()
	})
}

// SetAddress sets the "address" field.
func (u *EmployeeUpsertOne) SetAddress(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateAddress() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateAddress()
	})
}

// SetStartDate sets the "start_date" field.
func (u *EmployeeUpsertOne) SetStartDate(v time.Time) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateStartDate() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *EmployeeUpsertOne) SetEndDate(v time.Time) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateEndDate() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *EmployeeUpsertOne) ClearEndDate() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearEndDate()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *EmployeeUpsertOne) SetPhoneNumber(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdatePhoneNumber() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetDegreeName sets the "degree_name" field.
func (u *EmployeeUpsertOne) SetDegreeName(v string) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDegreeName(v)
	})
}

// UpdateDegreeName sets the "degree_name" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateDegreeName() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDegreeName()
	})
}

// SetDegreeYear sets the "degree_year" field.
func (u *EmployeeUpsertOne) SetDegreeYear(v int32) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDegreeYear(v)
	})
}

// AddDegreeYear adds v to the "degree_year" field.
func (u *EmployeeUpsertOne) AddDegreeYear(v int32) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.AddDegreeYear(v)
	})
}

// UpdateDegreeYear sets the "degree_year" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateDegreeYear() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDegreeYear()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *EmployeeUpsertOne) SetDepartmentID(v uuid.UUID) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateDepartmentID() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDepartmentID()
	})
}

// SetEmployeeType sets the "employee_type" field.
func (u *EmployeeUpsertOne) SetEmployeeType(v int32) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetEmployeeType(v)
	})
}

// AddEmployeeType adds v to the "employee_type" field.
func (u *EmployeeUpsertOne) AddEmployeeType(v int32) *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.AddEmployeeType(v)
	})
}

// UpdateEmployeeType sets the "employee_type" field to the value that was provided on create.
func (u *EmployeeUpsertOne) UpdateEmployeeType() *EmployeeUpsertOne {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateEmployeeType()
	})
}

// Exec executes the query.
func (u *EmployeeUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmployeeCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmployeeUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EmployeeUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: EmployeeUpsertOne.ID is not supported by MySQL driver. Use EmployeeUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EmployeeUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EmployeeCreateBulk is the builder for creating many Employee entities in bulk.
type EmployeeCreateBulk struct {
	config
	err      error
	builders []*EmployeeCreate
	conflict []sql.ConflictOption
}

// Save creates the Employee entities in the database.
func (ecb *EmployeeCreateBulk) Save(ctx context.Context) ([]*Employee, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Employee, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmployeeMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) SaveX(ctx context.Context) []*Employee {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EmployeeCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EmployeeCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Employee.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EmployeeUpsert) {
//			SetEmployeeID(v+v).
//		}).
//		Exec(ctx)
func (ecb *EmployeeCreateBulk) OnConflict(opts ...sql.ConflictOption) *EmployeeUpsertBulk {
	ecb.conflict = opts
	return &EmployeeUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EmployeeCreateBulk) OnConflictColumns(columns ...string) *EmployeeUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EmployeeUpsertBulk{
		create: ecb,
	}
}

// EmployeeUpsertBulk is the builder for "upsert"-ing
// a bulk of Employee nodes.
type EmployeeUpsertBulk struct {
	create *EmployeeCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(employee.FieldID)
//			}),
//		).
//		Exec(ctx)
func (u *EmployeeUpsertBulk) UpdateNewValues() *EmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(employee.FieldID)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Employee.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EmployeeUpsertBulk) Ignore() *EmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EmployeeUpsertBulk) DoNothing() *EmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EmployeeCreateBulk.OnConflict
// documentation for more info.
func (u *EmployeeUpsertBulk) Update(set func(*EmployeeUpsert)) *EmployeeUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EmployeeUpsert{UpdateSet: update})
	}))
	return u
}

// SetEmployeeID sets the "employee_id" field.
func (u *EmployeeUpsertBulk) SetEmployeeID(v uuid.UUID) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetEmployeeID(v)
	})
}

// UpdateEmployeeID sets the "employee_id" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateEmployeeID() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateEmployeeID()
	})
}

// SetFirstName sets the "first_name" field.
func (u *EmployeeUpsertBulk) SetFirstName(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetFirstName(v)
	})
}

// UpdateFirstName sets the "first_name" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateFirstName() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateFirstName()
	})
}

// SetLastName sets the "last_name" field.
func (u *EmployeeUpsertBulk) SetLastName(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetLastName(v)
	})
}

// UpdateLastName sets the "last_name" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateLastName() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateLastName()
	})
}

// SetGender sets the "gender" field.
func (u *EmployeeUpsertBulk) SetGender(v int32) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetGender(v)
	})
}

// AddGender adds v to the "gender" field.
func (u *EmployeeUpsertBulk) AddGender(v int32) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.AddGender(v)
	})
}

// UpdateGender sets the "gender" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateGender() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateGender()
	})
}

// SetDateOfBirth sets the "date_of_birth" field.
func (u *EmployeeUpsertBulk) SetDateOfBirth(v time.Time) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDateOfBirth(v)
	})
}

// UpdateDateOfBirth sets the "date_of_birth" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateDateOfBirth() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDateOfBirth()
	})
}

// SetCode sets the "code" field.
func (u *EmployeeUpsertBulk) SetCode(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetCode(v)
	})
}

// UpdateCode sets the "code" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateCode() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateCode()
	})
}

// SetAddress sets the "address" field.
func (u *EmployeeUpsertBulk) SetAddress(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetAddress(v)
	})
}

// UpdateAddress sets the "address" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateAddress() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateAddress()
	})
}

// SetStartDate sets the "start_date" field.
func (u *EmployeeUpsertBulk) SetStartDate(v time.Time) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateStartDate() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *EmployeeUpsertBulk) SetEndDate(v time.Time) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateEndDate() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *EmployeeUpsertBulk) ClearEndDate() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.ClearEndDate()
	})
}

// SetPhoneNumber sets the "phone_number" field.
func (u *EmployeeUpsertBulk) SetPhoneNumber(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetPhoneNumber(v)
	})
}

// UpdatePhoneNumber sets the "phone_number" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdatePhoneNumber() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdatePhoneNumber()
	})
}

// SetDegreeName sets the "degree_name" field.
func (u *EmployeeUpsertBulk) SetDegreeName(v string) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDegreeName(v)
	})
}

// UpdateDegreeName sets the "degree_name" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateDegreeName() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDegreeName()
	})
}

// SetDegreeYear sets the "degree_year" field.
func (u *EmployeeUpsertBulk) SetDegreeYear(v int32) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDegreeYear(v)
	})
}

// AddDegreeYear adds v to the "degree_year" field.
func (u *EmployeeUpsertBulk) AddDegreeYear(v int32) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.AddDegreeYear(v)
	})
}

// UpdateDegreeYear sets the "degree_year" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateDegreeYear() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDegreeYear()
	})
}

// SetDepartmentID sets the "department_id" field.
func (u *EmployeeUpsertBulk) SetDepartmentID(v uuid.UUID) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetDepartmentID(v)
	})
}

// UpdateDepartmentID sets the "department_id" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateDepartmentID() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateDepartmentID()
	})
}

// SetEmployeeType sets the "employee_type" field.
func (u *EmployeeUpsertBulk) SetEmployeeType(v int32) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.SetEmployeeType(v)
	})
}

// AddEmployeeType adds v to the "employee_type" field.
func (u *EmployeeUpsertBulk) AddEmployeeType(v int32) *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.AddEmployeeType(v)
	})
}

// UpdateEmployeeType sets the "employee_type" field to the value that was provided on create.
func (u *EmployeeUpsertBulk) UpdateEmployeeType() *EmployeeUpsertBulk {
	return u.Update(func(s *EmployeeUpsert) {
		s.UpdateEmployeeType()
	})
}

// Exec executes the query.
func (u *EmployeeUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EmployeeCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EmployeeCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EmployeeUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
