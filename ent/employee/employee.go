// Code generated by ent, DO NOT EDIT.

package employee

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the employee type in the database.
	Label = "employee"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmployeeID holds the string denoting the employee_id field in the database.
	FieldEmployeeID = "employee_id"
	// FieldFirstName holds the string denoting the first_name field in the database.
	FieldFirstName = "first_name"
	// FieldLastName holds the string denoting the last_name field in the database.
	FieldLastName = "last_name"
	// FieldGender holds the string denoting the gender field in the database.
	FieldGender = "gender"
	// FieldDateOfBirth holds the string denoting the date_of_birth field in the database.
	FieldDateOfBirth = "date_of_birth"
	// FieldCode holds the string denoting the code field in the database.
	FieldCode = "code"
	// FieldAddress holds the string denoting the address field in the database.
	FieldAddress = "address"
	// FieldStartDate holds the string denoting the start_date field in the database.
	FieldStartDate = "start_date"
	// FieldEndDate holds the string denoting the end_date field in the database.
	FieldEndDate = "end_date"
	// FieldPhoneNumber holds the string denoting the phone_number field in the database.
	FieldPhoneNumber = "phone_number"
	// FieldDegreeName holds the string denoting the degree_name field in the database.
	FieldDegreeName = "degree_name"
	// FieldDegreeYear holds the string denoting the degree_year field in the database.
	FieldDegreeYear = "degree_year"
	// FieldDepartmentID holds the string denoting the department_id field in the database.
	FieldDepartmentID = "department_id"
	// FieldEmployeeType holds the string denoting the employee_type field in the database.
	FieldEmployeeType = "employee_type"
	// EdgeAuth holds the string denoting the auth edge name in mutations.
	EdgeAuth = "auth"
	// EdgeDepartment holds the string denoting the department edge name in mutations.
	EdgeDepartment = "department"
	// EdgeDoctor holds the string denoting the doctor edge name in mutations.
	EdgeDoctor = "doctor"
	// EdgeNurse holds the string denoting the nurse edge name in mutations.
	EdgeNurse = "nurse"
	// Table holds the table name of the employee in the database.
	Table = "employee"
	// AuthTable is the table that holds the auth relation/edge.
	AuthTable = "employee"
	// AuthInverseTable is the table name for the Auth entity.
	// It exists in this package in order to avoid circular dependency with the "auth" package.
	AuthInverseTable = "auth"
	// AuthColumn is the table column denoting the auth relation/edge.
	AuthColumn = "employee_id"
	// DepartmentTable is the table that holds the department relation/edge.
	DepartmentTable = "employee"
	// DepartmentInverseTable is the table name for the Department entity.
	// It exists in this package in order to avoid circular dependency with the "department" package.
	DepartmentInverseTable = "department"
	// DepartmentColumn is the table column denoting the department relation/edge.
	DepartmentColumn = "department_id"
	// DoctorTable is the table that holds the doctor relation/edge.
	DoctorTable = "doctor"
	// DoctorInverseTable is the table name for the Doctor entity.
	// It exists in this package in order to avoid circular dependency with the "doctor" package.
	DoctorInverseTable = "doctor"
	// DoctorColumn is the table column denoting the doctor relation/edge.
	DoctorColumn = "doctor_id"
	// NurseTable is the table that holds the nurse relation/edge.
	NurseTable = "nurse"
	// NurseInverseTable is the table name for the Nurse entity.
	// It exists in this package in order to avoid circular dependency with the "nurse" package.
	NurseInverseTable = "nurse"
	// NurseColumn is the table column denoting the nurse relation/edge.
	NurseColumn = "nurse_id"
)

// Columns holds all SQL columns for employee fields.
var Columns = []string{
	FieldID,
	FieldEmployeeID,
	FieldFirstName,
	FieldLastName,
	FieldGender,
	FieldDateOfBirth,
	FieldCode,
	FieldAddress,
	FieldStartDate,
	FieldEndDate,
	FieldPhoneNumber,
	FieldDegreeName,
	FieldDegreeYear,
	FieldDepartmentID,
	FieldEmployeeType,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// CodeValidator is a validator for the "code" field. It is called by the builders before save.
	CodeValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Employee queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmployeeID orders the results by the employee_id field.
func ByEmployeeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeID, opts...).ToFunc()
}

// ByFirstName orders the results by the first_name field.
func ByFirstName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirstName, opts...).ToFunc()
}

// ByLastName orders the results by the last_name field.
func ByLastName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastName, opts...).ToFunc()
}

// ByGender orders the results by the gender field.
func ByGender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGender, opts...).ToFunc()
}

// ByDateOfBirth orders the results by the date_of_birth field.
func ByDateOfBirth(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDateOfBirth, opts...).ToFunc()
}

// ByCode orders the results by the code field.
func ByCode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCode, opts...).ToFunc()
}

// ByAddress orders the results by the address field.
func ByAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAddress, opts...).ToFunc()
}

// ByStartDate orders the results by the start_date field.
func ByStartDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartDate, opts...).ToFunc()
}

// ByEndDate orders the results by the end_date field.
func ByEndDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndDate, opts...).ToFunc()
}

// ByPhoneNumber orders the results by the phone_number field.
func ByPhoneNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhoneNumber, opts...).ToFunc()
}

// ByDegreeName orders the results by the degree_name field.
func ByDegreeName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDegreeName, opts...).ToFunc()
}

// ByDegreeYear orders the results by the degree_year field.
func ByDegreeYear(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDegreeYear, opts...).ToFunc()
}

// ByDepartmentID orders the results by the department_id field.
func ByDepartmentID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDepartmentID, opts...).ToFunc()
}

// ByEmployeeType orders the results by the employee_type field.
func ByEmployeeType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmployeeType, opts...).ToFunc()
}

// ByAuthField orders the results by auth field.
func ByAuthField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newAuthStep(), sql.OrderByField(field, opts...))
	}
}

// ByDepartmentField orders the results by department field.
func ByDepartmentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepartmentStep(), sql.OrderByField(field, opts...))
	}
}

// ByDoctorField orders the results by doctor field.
func ByDoctorField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDoctorStep(), sql.OrderByField(field, opts...))
	}
}

// ByNurseField orders the results by nurse field.
func ByNurseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newNurseStep(), sql.OrderByField(field, opts...))
	}
}
func newAuthStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(AuthInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, AuthTable, AuthColumn),
	)
}
func newDepartmentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepartmentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
	)
}
func newDoctorStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DoctorInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, DoctorTable, DoctorColumn),
	)
}
func newNurseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(NurseInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, NurseTable, NurseColumn),
	)
}
