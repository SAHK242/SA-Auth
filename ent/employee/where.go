// Code generated by ent, DO NOT EDIT.

package employee

import (
	"auth/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldID, id))
}

// EmployeeID applies equality check predicate on the "employee_id" field. It's identical to EmployeeIDEQ.
func EmployeeID(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEmployeeID, v))
}

// FirstName applies equality check predicate on the "first_name" field. It's identical to FirstNameEQ.
func FirstName(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldFirstName, v))
}

// LastName applies equality check predicate on the "last_name" field. It's identical to LastNameEQ.
func LastName(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldLastName, v))
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldGender, v))
}

// DateOfBirth applies equality check predicate on the "date_of_birth" field. It's identical to DateOfBirthEQ.
func DateOfBirth(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDateOfBirth, v))
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCode, v))
}

// Address applies equality check predicate on the "address" field. It's identical to AddressEQ.
func Address(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldAddress, v))
}

// StartDate applies equality check predicate on the "start_date" field. It's identical to StartDateEQ.
func StartDate(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldStartDate, v))
}

// EndDate applies equality check predicate on the "end_date" field. It's identical to EndDateEQ.
func EndDate(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEndDate, v))
}

// PhoneNumber applies equality check predicate on the "phone_number" field. It's identical to PhoneNumberEQ.
func PhoneNumber(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldPhoneNumber, v))
}

// DegreeName applies equality check predicate on the "degree_name" field. It's identical to DegreeNameEQ.
func DegreeName(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDegreeName, v))
}

// DegreeYear applies equality check predicate on the "degree_year" field. It's identical to DegreeYearEQ.
func DegreeYear(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDegreeYear, v))
}

// DepartmentID applies equality check predicate on the "department_id" field. It's identical to DepartmentIDEQ.
func DepartmentID(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDepartmentID, v))
}

// EmployeeType applies equality check predicate on the "employee_type" field. It's identical to EmployeeTypeEQ.
func EmployeeType(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEmployeeType, v))
}

// EmployeeIDEQ applies the EQ predicate on the "employee_id" field.
func EmployeeIDEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEmployeeID, v))
}

// EmployeeIDNEQ applies the NEQ predicate on the "employee_id" field.
func EmployeeIDNEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldEmployeeID, v))
}

// EmployeeIDIn applies the In predicate on the "employee_id" field.
func EmployeeIDIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldEmployeeID, vs...))
}

// EmployeeIDNotIn applies the NotIn predicate on the "employee_id" field.
func EmployeeIDNotIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldEmployeeID, vs...))
}

// FirstNameEQ applies the EQ predicate on the "first_name" field.
func FirstNameEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldFirstName, v))
}

// FirstNameNEQ applies the NEQ predicate on the "first_name" field.
func FirstNameNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldFirstName, v))
}

// FirstNameIn applies the In predicate on the "first_name" field.
func FirstNameIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldFirstName, vs...))
}

// FirstNameNotIn applies the NotIn predicate on the "first_name" field.
func FirstNameNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldFirstName, vs...))
}

// FirstNameGT applies the GT predicate on the "first_name" field.
func FirstNameGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldFirstName, v))
}

// FirstNameGTE applies the GTE predicate on the "first_name" field.
func FirstNameGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldFirstName, v))
}

// FirstNameLT applies the LT predicate on the "first_name" field.
func FirstNameLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldFirstName, v))
}

// FirstNameLTE applies the LTE predicate on the "first_name" field.
func FirstNameLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldFirstName, v))
}

// FirstNameContains applies the Contains predicate on the "first_name" field.
func FirstNameContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldFirstName, v))
}

// FirstNameHasPrefix applies the HasPrefix predicate on the "first_name" field.
func FirstNameHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldFirstName, v))
}

// FirstNameHasSuffix applies the HasSuffix predicate on the "first_name" field.
func FirstNameHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldFirstName, v))
}

// FirstNameEqualFold applies the EqualFold predicate on the "first_name" field.
func FirstNameEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldFirstName, v))
}

// FirstNameContainsFold applies the ContainsFold predicate on the "first_name" field.
func FirstNameContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldFirstName, v))
}

// LastNameEQ applies the EQ predicate on the "last_name" field.
func LastNameEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldLastName, v))
}

// LastNameNEQ applies the NEQ predicate on the "last_name" field.
func LastNameNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldLastName, v))
}

// LastNameIn applies the In predicate on the "last_name" field.
func LastNameIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldLastName, vs...))
}

// LastNameNotIn applies the NotIn predicate on the "last_name" field.
func LastNameNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldLastName, vs...))
}

// LastNameGT applies the GT predicate on the "last_name" field.
func LastNameGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldLastName, v))
}

// LastNameGTE applies the GTE predicate on the "last_name" field.
func LastNameGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldLastName, v))
}

// LastNameLT applies the LT predicate on the "last_name" field.
func LastNameLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldLastName, v))
}

// LastNameLTE applies the LTE predicate on the "last_name" field.
func LastNameLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldLastName, v))
}

// LastNameContains applies the Contains predicate on the "last_name" field.
func LastNameContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldLastName, v))
}

// LastNameHasPrefix applies the HasPrefix predicate on the "last_name" field.
func LastNameHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldLastName, v))
}

// LastNameHasSuffix applies the HasSuffix predicate on the "last_name" field.
func LastNameHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldLastName, v))
}

// LastNameEqualFold applies the EqualFold predicate on the "last_name" field.
func LastNameEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldLastName, v))
}

// LastNameContainsFold applies the ContainsFold predicate on the "last_name" field.
func LastNameContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldLastName, v))
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldGender, v))
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldGender, v))
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int32) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldGender, vs...))
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int32) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldGender, vs...))
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldGender, v))
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldGender, v))
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldGender, v))
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldGender, v))
}

// DateOfBirthEQ applies the EQ predicate on the "date_of_birth" field.
func DateOfBirthEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDateOfBirth, v))
}

// DateOfBirthNEQ applies the NEQ predicate on the "date_of_birth" field.
func DateOfBirthNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldDateOfBirth, v))
}

// DateOfBirthIn applies the In predicate on the "date_of_birth" field.
func DateOfBirthIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldDateOfBirth, vs...))
}

// DateOfBirthNotIn applies the NotIn predicate on the "date_of_birth" field.
func DateOfBirthNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldDateOfBirth, vs...))
}

// DateOfBirthGT applies the GT predicate on the "date_of_birth" field.
func DateOfBirthGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldDateOfBirth, v))
}

// DateOfBirthGTE applies the GTE predicate on the "date_of_birth" field.
func DateOfBirthGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldDateOfBirth, v))
}

// DateOfBirthLT applies the LT predicate on the "date_of_birth" field.
func DateOfBirthLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldDateOfBirth, v))
}

// DateOfBirthLTE applies the LTE predicate on the "date_of_birth" field.
func DateOfBirthLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldDateOfBirth, v))
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldCode, v))
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldCode, v))
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldCode, vs...))
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldCode, vs...))
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldCode, v))
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldCode, v))
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldCode, v))
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldCode, v))
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldCode, v))
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldCode, v))
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldCode, v))
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldCode, v))
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldCode, v))
}

// AddressEQ applies the EQ predicate on the "address" field.
func AddressEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldAddress, v))
}

// AddressNEQ applies the NEQ predicate on the "address" field.
func AddressNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldAddress, v))
}

// AddressIn applies the In predicate on the "address" field.
func AddressIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldAddress, vs...))
}

// AddressNotIn applies the NotIn predicate on the "address" field.
func AddressNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldAddress, vs...))
}

// AddressGT applies the GT predicate on the "address" field.
func AddressGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldAddress, v))
}

// AddressGTE applies the GTE predicate on the "address" field.
func AddressGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldAddress, v))
}

// AddressLT applies the LT predicate on the "address" field.
func AddressLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldAddress, v))
}

// AddressLTE applies the LTE predicate on the "address" field.
func AddressLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldAddress, v))
}

// AddressContains applies the Contains predicate on the "address" field.
func AddressContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldAddress, v))
}

// AddressHasPrefix applies the HasPrefix predicate on the "address" field.
func AddressHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldAddress, v))
}

// AddressHasSuffix applies the HasSuffix predicate on the "address" field.
func AddressHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldAddress, v))
}

// AddressEqualFold applies the EqualFold predicate on the "address" field.
func AddressEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldAddress, v))
}

// AddressContainsFold applies the ContainsFold predicate on the "address" field.
func AddressContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldAddress, v))
}

// StartDateEQ applies the EQ predicate on the "start_date" field.
func StartDateEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldStartDate, v))
}

// StartDateNEQ applies the NEQ predicate on the "start_date" field.
func StartDateNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldStartDate, v))
}

// StartDateIn applies the In predicate on the "start_date" field.
func StartDateIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldStartDate, vs...))
}

// StartDateNotIn applies the NotIn predicate on the "start_date" field.
func StartDateNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldStartDate, vs...))
}

// StartDateGT applies the GT predicate on the "start_date" field.
func StartDateGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldStartDate, v))
}

// StartDateGTE applies the GTE predicate on the "start_date" field.
func StartDateGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldStartDate, v))
}

// StartDateLT applies the LT predicate on the "start_date" field.
func StartDateLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldStartDate, v))
}

// StartDateLTE applies the LTE predicate on the "start_date" field.
func StartDateLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldStartDate, v))
}

// EndDateEQ applies the EQ predicate on the "end_date" field.
func EndDateEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEndDate, v))
}

// EndDateNEQ applies the NEQ predicate on the "end_date" field.
func EndDateNEQ(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldEndDate, v))
}

// EndDateIn applies the In predicate on the "end_date" field.
func EndDateIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldEndDate, vs...))
}

// EndDateNotIn applies the NotIn predicate on the "end_date" field.
func EndDateNotIn(vs ...time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldEndDate, vs...))
}

// EndDateGT applies the GT predicate on the "end_date" field.
func EndDateGT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldEndDate, v))
}

// EndDateGTE applies the GTE predicate on the "end_date" field.
func EndDateGTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldEndDate, v))
}

// EndDateLT applies the LT predicate on the "end_date" field.
func EndDateLT(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldEndDate, v))
}

// EndDateLTE applies the LTE predicate on the "end_date" field.
func EndDateLTE(v time.Time) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldEndDate, v))
}

// EndDateIsNil applies the IsNil predicate on the "end_date" field.
func EndDateIsNil() predicate.Employee {
	return predicate.Employee(sql.FieldIsNull(FieldEndDate))
}

// EndDateNotNil applies the NotNil predicate on the "end_date" field.
func EndDateNotNil() predicate.Employee {
	return predicate.Employee(sql.FieldNotNull(FieldEndDate))
}

// PhoneNumberEQ applies the EQ predicate on the "phone_number" field.
func PhoneNumberEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldPhoneNumber, v))
}

// PhoneNumberNEQ applies the NEQ predicate on the "phone_number" field.
func PhoneNumberNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldPhoneNumber, v))
}

// PhoneNumberIn applies the In predicate on the "phone_number" field.
func PhoneNumberIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldPhoneNumber, vs...))
}

// PhoneNumberNotIn applies the NotIn predicate on the "phone_number" field.
func PhoneNumberNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldPhoneNumber, vs...))
}

// PhoneNumberGT applies the GT predicate on the "phone_number" field.
func PhoneNumberGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldPhoneNumber, v))
}

// PhoneNumberGTE applies the GTE predicate on the "phone_number" field.
func PhoneNumberGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldPhoneNumber, v))
}

// PhoneNumberLT applies the LT predicate on the "phone_number" field.
func PhoneNumberLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldPhoneNumber, v))
}

// PhoneNumberLTE applies the LTE predicate on the "phone_number" field.
func PhoneNumberLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldPhoneNumber, v))
}

// PhoneNumberContains applies the Contains predicate on the "phone_number" field.
func PhoneNumberContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldPhoneNumber, v))
}

// PhoneNumberHasPrefix applies the HasPrefix predicate on the "phone_number" field.
func PhoneNumberHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldPhoneNumber, v))
}

// PhoneNumberHasSuffix applies the HasSuffix predicate on the "phone_number" field.
func PhoneNumberHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldPhoneNumber, v))
}

// PhoneNumberEqualFold applies the EqualFold predicate on the "phone_number" field.
func PhoneNumberEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldPhoneNumber, v))
}

// PhoneNumberContainsFold applies the ContainsFold predicate on the "phone_number" field.
func PhoneNumberContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldPhoneNumber, v))
}

// DegreeNameEQ applies the EQ predicate on the "degree_name" field.
func DegreeNameEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDegreeName, v))
}

// DegreeNameNEQ applies the NEQ predicate on the "degree_name" field.
func DegreeNameNEQ(v string) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldDegreeName, v))
}

// DegreeNameIn applies the In predicate on the "degree_name" field.
func DegreeNameIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldDegreeName, vs...))
}

// DegreeNameNotIn applies the NotIn predicate on the "degree_name" field.
func DegreeNameNotIn(vs ...string) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldDegreeName, vs...))
}

// DegreeNameGT applies the GT predicate on the "degree_name" field.
func DegreeNameGT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldDegreeName, v))
}

// DegreeNameGTE applies the GTE predicate on the "degree_name" field.
func DegreeNameGTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldDegreeName, v))
}

// DegreeNameLT applies the LT predicate on the "degree_name" field.
func DegreeNameLT(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldDegreeName, v))
}

// DegreeNameLTE applies the LTE predicate on the "degree_name" field.
func DegreeNameLTE(v string) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldDegreeName, v))
}

// DegreeNameContains applies the Contains predicate on the "degree_name" field.
func DegreeNameContains(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContains(FieldDegreeName, v))
}

// DegreeNameHasPrefix applies the HasPrefix predicate on the "degree_name" field.
func DegreeNameHasPrefix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasPrefix(FieldDegreeName, v))
}

// DegreeNameHasSuffix applies the HasSuffix predicate on the "degree_name" field.
func DegreeNameHasSuffix(v string) predicate.Employee {
	return predicate.Employee(sql.FieldHasSuffix(FieldDegreeName, v))
}

// DegreeNameEqualFold applies the EqualFold predicate on the "degree_name" field.
func DegreeNameEqualFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldEqualFold(FieldDegreeName, v))
}

// DegreeNameContainsFold applies the ContainsFold predicate on the "degree_name" field.
func DegreeNameContainsFold(v string) predicate.Employee {
	return predicate.Employee(sql.FieldContainsFold(FieldDegreeName, v))
}

// DegreeYearEQ applies the EQ predicate on the "degree_year" field.
func DegreeYearEQ(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDegreeYear, v))
}

// DegreeYearNEQ applies the NEQ predicate on the "degree_year" field.
func DegreeYearNEQ(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldDegreeYear, v))
}

// DegreeYearIn applies the In predicate on the "degree_year" field.
func DegreeYearIn(vs ...int32) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldDegreeYear, vs...))
}

// DegreeYearNotIn applies the NotIn predicate on the "degree_year" field.
func DegreeYearNotIn(vs ...int32) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldDegreeYear, vs...))
}

// DegreeYearGT applies the GT predicate on the "degree_year" field.
func DegreeYearGT(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldDegreeYear, v))
}

// DegreeYearGTE applies the GTE predicate on the "degree_year" field.
func DegreeYearGTE(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldDegreeYear, v))
}

// DegreeYearLT applies the LT predicate on the "degree_year" field.
func DegreeYearLT(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldDegreeYear, v))
}

// DegreeYearLTE applies the LTE predicate on the "degree_year" field.
func DegreeYearLTE(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldDegreeYear, v))
}

// DepartmentIDEQ applies the EQ predicate on the "department_id" field.
func DepartmentIDEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldDepartmentID, v))
}

// DepartmentIDNEQ applies the NEQ predicate on the "department_id" field.
func DepartmentIDNEQ(v uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldDepartmentID, v))
}

// DepartmentIDIn applies the In predicate on the "department_id" field.
func DepartmentIDIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldDepartmentID, vs...))
}

// DepartmentIDNotIn applies the NotIn predicate on the "department_id" field.
func DepartmentIDNotIn(vs ...uuid.UUID) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldDepartmentID, vs...))
}

// EmployeeTypeEQ applies the EQ predicate on the "employee_type" field.
func EmployeeTypeEQ(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldEQ(FieldEmployeeType, v))
}

// EmployeeTypeNEQ applies the NEQ predicate on the "employee_type" field.
func EmployeeTypeNEQ(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldNEQ(FieldEmployeeType, v))
}

// EmployeeTypeIn applies the In predicate on the "employee_type" field.
func EmployeeTypeIn(vs ...int32) predicate.Employee {
	return predicate.Employee(sql.FieldIn(FieldEmployeeType, vs...))
}

// EmployeeTypeNotIn applies the NotIn predicate on the "employee_type" field.
func EmployeeTypeNotIn(vs ...int32) predicate.Employee {
	return predicate.Employee(sql.FieldNotIn(FieldEmployeeType, vs...))
}

// EmployeeTypeGT applies the GT predicate on the "employee_type" field.
func EmployeeTypeGT(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldGT(FieldEmployeeType, v))
}

// EmployeeTypeGTE applies the GTE predicate on the "employee_type" field.
func EmployeeTypeGTE(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldGTE(FieldEmployeeType, v))
}

// EmployeeTypeLT applies the LT predicate on the "employee_type" field.
func EmployeeTypeLT(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldLT(FieldEmployeeType, v))
}

// EmployeeTypeLTE applies the LTE predicate on the "employee_type" field.
func EmployeeTypeLTE(v int32) predicate.Employee {
	return predicate.Employee(sql.FieldLTE(FieldEmployeeType, v))
}

// HasAuth applies the HasEdge predicate on the "auth" edge.
func HasAuth() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, AuthTable, AuthColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAuthWith applies the HasEdge predicate on the "auth" edge with a given conditions (other predicates).
func HasAuthWith(preds ...predicate.Auth) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := newAuthStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDepartment applies the HasEdge predicate on the "department" edge.
func HasDepartment() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DepartmentTable, DepartmentColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDepartmentWith applies the HasEdge predicate on the "department" edge with a given conditions (other predicates).
func HasDepartmentWith(preds ...predicate.Department) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := newDepartmentStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDoctor applies the HasEdge predicate on the "doctor" edge.
func HasDoctor() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, DoctorTable, DoctorColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDoctorWith applies the HasEdge predicate on the "doctor" edge with a given conditions (other predicates).
func HasDoctorWith(preds ...predicate.Doctor) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := newDoctorStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasNurse applies the HasEdge predicate on the "nurse" edge.
func HasNurse() predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, NurseTable, NurseColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNurseWith applies the HasEdge predicate on the "nurse" edge with a given conditions (other predicates).
func HasNurseWith(preds ...predicate.Nurse) predicate.Employee {
	return predicate.Employee(func(s *sql.Selector) {
		step := newNurseStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Employee) predicate.Employee {
	return predicate.Employee(sql.NotPredicates(p))
}
